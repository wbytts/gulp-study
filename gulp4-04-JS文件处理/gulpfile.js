const gulp = require('gulp');
const nodeSass = require('node-sass');
const gulpSass = require('gulp-sass')(nodeSass);
const gulpConcat = require('gulp-concat');
const gulpSourcemaps = require('gulp-sourcemaps');
const gulpAutoprefixer = require('gulp-autoprefixer');
const gulpCleanCss = require('gulp-clean-css');
const gulpRev = require('gulp-rev');
const gulpRevCollector = require('gulp-rev-collector');
const gulpClean = require('gulp-clean');
const gulpHtmlmin = require('gulp-htmlmin');
const gulpCreateCustomDir = require('gulp-create-custom-dir');
const gulpEslint = require('gulp-eslint');
// const gulpImagemin = require('gulp-imagemin');
const gulpBabel = require('gulp-babel');
const gulpUglify = require('gulp-uglify');
const gulpOpen = require('gulp-open');
const gulpConnect = require('gulp-connect');
const HttpProxyMiddleware = require('http-proxy-middleware');
const ConnectModrewrite = require('connect-modrewrite');
const gulpReplace = require('gulp-replace');
const gulpRequirejsRevReplace = require('gulp-requirejs-rev-replace');

// 清理构建目录
function t_dist_clean(callback) {
  gulp
    .src(['./dist/**/*.*'], {
      read: false, // 不去读取文件的内容
    })
    .pipe(gulpClean());
  callback();
}

function t_copy_assets(callback) {
  gulp.src('./src/assets/**/*').pipe(gulp.dest('./dist/assets/', { base: './src/assets/' }));
  callback();
}

// 样式处理 编译
function t_style(callback) {
  gulp
    .src(
      [
        './src/style/**/*.{scss,css}', // 找出所有的 scss 和 css 文件
        '!./src/style/main.css', // 排除掉之前合并过的 main.css 文件
      ],
      { base: './src' }
    )
    .pipe(gulpSourcemaps.init()) // 代码映射初始化
    .pipe(gulpSass().on('error', gulpSass.logError)) // sass编译
    .pipe(
      // CSS自动打前缀
      gulpAutoprefixer({
        // browsers: ['> 0.1% in CN'], // 设置支持的浏览器版本【最好配置在package.json或者单独的配置文件中】
        overrideBrowserslist: ['> 0.1% in CN'], // 如果一定要配置，可以用这个代替
        cascade: false, // 设定最终生成的CSS样式
      })
    )
    .pipe(gulpConcat('main.css')) // 合并样式文件
    .pipe(
      // 样式文件内容压缩
      gulpCleanCss({
        cpmpatibility: 'ie8', // 压缩CSS
        keepSpecialComments: '*', // 保留所有特殊前缀，当你用autoprefixer生成浏览器前缀，如果不加这个参数，有可能会删除你的部分前缀
      })
    )
    .pipe(gulpRev()) // 给文件生成版本映射的文件
    .pipe(gulpSourcemaps.write()) // 写入代码映射
    .pipe(gulp.dest('./dist/style/')) // 将生成的文件输出到指定目录
    .pipe(gulpRev.manifest()) // 生成映射文件
    .pipe(gulp.dest('./src/style/')); // 保存映射文件
  callback();
}

// function tImage(callback) {
//   gulp.src(['./src/assets/**/*.{jpg,jpeg,gif,ico,png}'])
//   .pipe(gulpImagemin({
//     optimizationLevel: 5, // 优化等级， 0-7，默认3
//     progressive: true, // 无损压缩 jpg图片，默认false
//     interlaced: true, // 隔行扫描gif进行渲染
//     multipass: true, // 多次优化svg直到完全优化，默认false
//   }));
//   callback()
// }

function t_html(callback) {
  gulp
    .src(
      [
        './src/index.html', // 主页
        './src/views/**/*.html', // views页面
        './src/style/*.json', // 样式文件版本号映射
        './src/js/*.json', // JS文件版本号映射
      ],
      { base: './src', allowEmpty: true }
    )
    .pipe(gulpRevCollector({ replaceReved: true })) // 版本文件替换
    .pipe(
      // html 压缩
      gulpHtmlmin({
        caseSensitive: false,
        collapseBooleanAttributes: false,
        collapseInlineTagWhitespace: false,
        collapseWhitespace: true, // 压缩HTML
        conservativeCollapse: false,
        continueOnParseError: true,
        customAttrAssign: [],
        customAttrCollapse: /by-class/,
        customAttrSurround: [],
        customEventAttributes: [/^on[a-z]{3,}$/],
        decodeEntities: false,
        html5: true,
        ignoreCustomComments: [/^!/],
        ignoreCustomFragments: [/<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/],
        includeAutoGeneratedTags: true,
        keepClosingSlash: false,
        maxLineLength: 100, // 每行最大长度
        minifyJS: true, // 压缩页面JS
        minifyCSS: true, // 压缩页面CSS
        minifyURLs: true, // 压缩 URL
        preserveLineBreaks: false,
        preventAttributesEscaping: false,
        processConditionalComments: false,
        processScripts: [],
        quoteCharacter: '"', // 引用使用的字符，单引号、双引号之类的
        removeAttributeQuotes: false, // 移除属性的括号
        removeComments: true, // 移除注释
        removeEmptyAttributes: true, // 删掉所有空格做属性值
        removeOptionalTags: false, // 移除可选的标签
        removeRedundantAttributes: false,
        removeScriptTypeAttributes: false, // 删除 script标签的 type
        removeStyleLinkTypeAttributes: false, // 删除style和link的 type="text/css"
        removeTagWhitespace: false, // 移除标签的空白
        sortAttributes: false, // 属性排序
        sortClassName: false, // class名排序
        trimCustomFragments: false, // 截取 ignoreCustomFragments 周围的空白
        useShortDoctype: false,
      })
    )
    .pipe(gulp.dest('./dist/'));
  callback();
}

function t_js(callback) {
  gulp
    .src(['./src/js/**/*.js'])
    .pipe(gulpEslint()) // eslint检查
    .pipe(gulpEslint.format()) // eslint格式化
    .pipe(gulpBabel()) // babel转换
    .pipe(gulpUglify()) // JS代码压缩
    .pipe(gulpRev())
    .pipe(gulp.dest('./dist/js/', { base: './src/' }))
    .pipe(gulpRev.manifest())
    .pipe(gulp.dest('./src/js/'));
  //.pipe(gulpEslint.failAfterError());
  callback();
}

function t_dev_server(callback) {
  gulpConnect.server({
    root: ['./dist'], // 网站根目录
    port: 32101,
    livereload: true,
    middleware: function(connect, option) {
      return [
        ConnectModrewrite([
          '^/api/(.*)$ http://xxx.xxx.xxx.xxx:xxx/xxx/$1'
        ])
      ];
    }
  });
  callback();
}

function t_open_browser(callback) {
  gulp.src(__filename).pipe(gulpOpen({uri: 'http://127.0.0.1:32101/index.html'}));
  callback();
}


const build = gulp.series(
  t_dist_clean, // 清理资源
  gulp.parallel(
    gulp.series(
      gulp.parallel(t_style, t_js), // 处理样式和脚本
      t_html // 处理HTML
    ),
    t_copy_assets // 拷贝assets
  )
);


function watchSrcBuild(callback) {
  gulp.watch(['./src/**/*', '!./src/style/rev-manifest.json', '!./src/js/rev-manifest.json'], build);
}

module.exports = {
  t_dist_clean,
  t_copy_assets,
  t_style,
  t_js,
  t_html,
  build,
  dev: watchSrcBuild,
};
